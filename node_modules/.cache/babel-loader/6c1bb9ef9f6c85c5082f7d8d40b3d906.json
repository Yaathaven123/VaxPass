{"ast":null,"code":"import VaxPassContract from \"contracts/VaxPass.json\";\n\nconst mysql = require('mysql');\n\nconst Web3 = require(\"web3\");\n\nlet provider = undefined;\nlet selectedAccount;\nlet Contract = undefined;\nlet web3;\nexport const init = async function () {\n  let informer = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : undefined;\n  provider = window.ethereum;\n  web3 = new Web3(provider);\n  provider.request({\n    method: \"eth_requestAccounts\"\n  }).then(accounts => {\n    selectedAccount = accounts[0];\n    console.log(\"Selected Account is \", selectedAccount);\n    console.log(\"calling informer below\");\n\n    if (informer !== undefined) {\n      informer(true);\n    }\n  }).catch(err => {\n    console.log(\"error is\", err);\n  });\n  provider.on(\"accountsChanged\", accounts => {\n    selectedAccount = accounts[0];\n    console.log(\"Selected Account changed to   \", selectedAccount);\n  });\n  const netId = await web3.eth.net.getId();\n  console.log(\"net id is \", netId);\n  Contract = await new web3.eth.Contract(VaxPassContract.abi, VaxPassContract.networks[netId].address);\n  console.log(\"the contract seems\", Contract);\n};\n\nconst sleep = milliseconds => {\n  return new Promise(resolve => setTimeout(resolve, milliseconds));\n};\n\nexport const addItem = async function (item) {\n  let itemsUpdator = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : undefined;\n  let txRejectionFunction = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : undefined;\n  let messageUpdator = arguments.length > 3 ? arguments[3] : undefined;\n  console.log(\"\\nAdding item on contract \", Contract);\n  await Contract.methods.addItem(item).send({\n    from: selectedAccount\n  }, async function (err, txHash) {\n    var _err$code;\n\n    messageUpdator(\"pending\");\n\n    if ((err === null || err === void 0 ? void 0 : (_err$code = err.code) === null || _err$code === void 0 ? void 0 : _err$code.toString()) === \"4001\") {\n      console.log(\"Transaction Rejected\", err, txHash);\n\n      if (txRejectionFunction !== undefined) {\n        txRejectionFunction();\n      }\n    } else {\n      let transactionReceipt = null;\n\n      while (transactionReceipt == null) {\n        // Waiting expectedBlockTime until the transaction is mined\n        transactionReceipt = await web3.eth.getTransactionReceipt(txHash);\n        await sleep(1000);\n      }\n\n      itemsUpdator(item);\n      messageUpdator(\"success\");\n      console.log(\"Item Added\");\n      messageUpdator(\"success\");\n    } //  return;\n\n  });\n};\nexport const deleteItem = async function (itemNumber) {\n  let updateItems = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : undefined;\n  let messageUpdator = arguments.length > 2 ? arguments[2] : undefined;\n  console.log(\"\\nDeleting item on contract \", Contract);\n  messageUpdator(\"pending\");\n  const res = await Contract.methods.deleteItem(itemNumber).send({\n    from: selectedAccount\n  }).on(\"receipt\", function (a, b) {\n    console.log(\"Item deleted\");\n    updateItems();\n    return;\n  });\n};\nexport const getItems = async setItems => {\n  if (provider === undefined || Contract === undefined) {\n    await init();\n  }\n\n  console.log(\"\\nattempt to get items on \", Contract);\n  let r = await Contract.methods.getItems().call();\n  console.log(\"in get  Items, items got\", r);\n  setItems(r);\n  return r;\n};\nexport const syncItems = async () => {\n  console.log(\"SYNNNN\");\n  console.log(\"Sync function start test\");\n  const connection = mysql.createConnection({\n    host: \"localhost\",\n    user: \"root\",\n    password: \"\",\n    database: \"vaxpass\",\n    port: \"3306\"\n  });\n  connection.query('INSERT INTO records (nic) VALUES (\"454534fsd\");');\n  console.log(\"Sync end test\");\n};","map":{"version":3,"sources":["/Users/DATA DRIVE/Degree/L5/SDGP/Project/Blockchain/src/Web3Client.js"],"names":["VaxPassContract","mysql","require","Web3","provider","undefined","selectedAccount","Contract","web3","init","informer","window","ethereum","request","method","then","accounts","console","log","catch","err","on","netId","eth","net","getId","abi","networks","address","sleep","milliseconds","Promise","resolve","setTimeout","addItem","item","itemsUpdator","txRejectionFunction","messageUpdator","methods","send","from","txHash","code","toString","transactionReceipt","getTransactionReceipt","deleteItem","itemNumber","updateItems","res","a","b","getItems","setItems","r","call","syncItems","connection","createConnection","host","user","password","database","port","query"],"mappings":"AAAA,OAAOA,eAAP,MAA4B,wBAA5B;;AACA,MAAMC,KAAK,GAAGC,OAAO,CAAC,OAAD,CAArB;;AACA,MAAMC,IAAI,GAAGD,OAAO,CAAC,MAAD,CAApB;;AACA,IAAIE,QAAQ,GAAGC,SAAf;AACA,IAAIC,eAAJ;AACA,IAAIC,QAAQ,GAAGF,SAAf;AACA,IAAIG,IAAJ;AACA,OAAO,MAAMC,IAAI,GAAG,kBAAgC;AAAA,MAAzBC,QAAyB,uEAAdL,SAAc;AAClDD,EAAAA,QAAQ,GAAGO,MAAM,CAACC,QAAlB;AACAJ,EAAAA,IAAI,GAAG,IAAIL,IAAJ,CAASC,QAAT,CAAP;AACAA,EAAAA,QAAQ,CACLS,OADH,CACW;AACPC,IAAAA,MAAM,EAAE;AADD,GADX,EAIGC,IAJH,CAISC,QAAD,IAAc;AAClBV,IAAAA,eAAe,GAAGU,QAAQ,CAAC,CAAD,CAA1B;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAY,sBAAZ,EAAoCZ,eAApC;AACAW,IAAAA,OAAO,CAACC,GAAR,CAAY,wBAAZ;;AAEA,QAAIR,QAAQ,KAAKL,SAAjB,EAA4B;AAC1BK,MAAAA,QAAQ,CAAC,IAAD,CAAR;AACD;AACF,GAZH,EAaGS,KAbH,CAaUC,GAAD,IAAS;AACdH,IAAAA,OAAO,CAACC,GAAR,CAAY,UAAZ,EAAwBE,GAAxB;AACD,GAfH;AAgBAhB,EAAAA,QAAQ,CAACiB,EAAT,CAAY,iBAAZ,EAAgCL,QAAD,IAAc;AAC3CV,IAAAA,eAAe,GAAGU,QAAQ,CAAC,CAAD,CAA1B;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAY,gCAAZ,EAA8CZ,eAA9C;AACD,GAHD;AAIA,QAAMgB,KAAK,GAAG,MAAMd,IAAI,CAACe,GAAL,CAASC,GAAT,CAAaC,KAAb,EAApB;AACAR,EAAAA,OAAO,CAACC,GAAR,CAAY,YAAZ,EAA0BI,KAA1B;AACAf,EAAAA,QAAQ,GAAG,MAAM,IAAIC,IAAI,CAACe,GAAL,CAAShB,QAAb,CACfP,eAAe,CAAC0B,GADD,EAEf1B,eAAe,CAAC2B,QAAhB,CAAyBL,KAAzB,EAAgCM,OAFjB,CAAjB;AAIAX,EAAAA,OAAO,CAACC,GAAR,CAAY,oBAAZ,EAAkCX,QAAlC;AACD,CA9BM;;AA+BP,MAAMsB,KAAK,GAAIC,YAAD,IAAkB;AAC9B,SAAO,IAAIC,OAAJ,CAAaC,OAAD,IAAaC,UAAU,CAACD,OAAD,EAAUF,YAAV,CAAnC,CAAP;AACD,CAFD;;AAGA,OAAO,MAAMI,OAAO,GAAG,gBACrBC,IADqB,EAKlB;AAAA,MAHHC,YAGG,uEAHY/B,SAGZ;AAAA,MAFHgC,mBAEG,uEAFmBhC,SAEnB;AAAA,MADHiC,cACG;AACHrB,EAAAA,OAAO,CAACC,GAAR,CAAY,4BAAZ,EAA0CX,QAA1C;AACA,QAAMA,QAAQ,CAACgC,OAAT,CAAiBL,OAAjB,CAAyBC,IAAzB,EAA+BK,IAA/B,CACJ;AACEC,IAAAA,IAAI,EAAEnC;AADR,GADI,EAKJ,gBAAgBc,GAAhB,EAAqBsB,MAArB,EAA6B;AAAA;;AAC3BJ,IAAAA,cAAc,CAAC,SAAD,CAAd;;AACA,QAAI,CAAAlB,GAAG,SAAH,IAAAA,GAAG,WAAH,yBAAAA,GAAG,CAAEuB,IAAL,wDAAWC,QAAX,QAA0B,MAA9B,EAAsC;AACpC3B,MAAAA,OAAO,CAACC,GAAR,CAAY,sBAAZ,EAAoCE,GAApC,EAAyCsB,MAAzC;;AACA,UAAIL,mBAAmB,KAAKhC,SAA5B,EAAuC;AACrCgC,QAAAA,mBAAmB;AACpB;AACF,KALD,MAKO;AACL,UAAIQ,kBAAkB,GAAG,IAAzB;;AACA,aAAOA,kBAAkB,IAAI,IAA7B,EAAmC;AACjC;AACAA,QAAAA,kBAAkB,GAAG,MAAMrC,IAAI,CAACe,GAAL,CAASuB,qBAAT,CAA+BJ,MAA/B,CAA3B;AACA,cAAMb,KAAK,CAAC,IAAD,CAAX;AACD;;AACDO,MAAAA,YAAY,CAACD,IAAD,CAAZ;AACAG,MAAAA,cAAc,CAAC,SAAD,CAAd;AAEArB,MAAAA,OAAO,CAACC,GAAR,CAAY,YAAZ;AACAoB,MAAAA,cAAc,CAAC,SAAD,CAAd;AACD,KAnB0B,CAqB3B;;AACD,GA3BG,CAAN;AA6BD,CApCM;AAsCP,OAAO,MAAMS,UAAU,GAAG,gBACxBC,UADwB,EAIrB;AAAA,MAFHC,WAEG,uEAFW5C,SAEX;AAAA,MADHiC,cACG;AACHrB,EAAAA,OAAO,CAACC,GAAR,CAAY,8BAAZ,EAA4CX,QAA5C;AACA+B,EAAAA,cAAc,CAAC,SAAD,CAAd;AACA,QAAMY,GAAG,GAAG,MAAM3C,QAAQ,CAACgC,OAAT,CACfQ,UADe,CACJC,UADI,EAEfR,IAFe,CAEV;AACJC,IAAAA,IAAI,EAAEnC;AADF,GAFU,EAKfe,EALe,CAKZ,SALY,EAKD,UAAU8B,CAAV,EAAaC,CAAb,EAAgB;AAC7BnC,IAAAA,OAAO,CAACC,GAAR,CAAY,cAAZ;AACA+B,IAAAA,WAAW;AACX;AACD,GATe,CAAlB;AAUD,CAjBM;AAmBP,OAAO,MAAMI,QAAQ,GAAG,MAAOC,QAAP,IAAoB;AAC1C,MAAIlD,QAAQ,KAAKC,SAAb,IAA0BE,QAAQ,KAAKF,SAA3C,EAAsD;AACpD,UAAMI,IAAI,EAAV;AACD;;AACDQ,EAAAA,OAAO,CAACC,GAAR,CAAY,4BAAZ,EAA0CX,QAA1C;AACA,MAAIgD,CAAC,GAAG,MAAMhD,QAAQ,CAACgC,OAAT,CAAiBc,QAAjB,GAA4BG,IAA5B,EAAd;AAEAvC,EAAAA,OAAO,CAACC,GAAR,CAAY,0BAAZ,EAAwCqC,CAAxC;AACAD,EAAAA,QAAQ,CAACC,CAAD,CAAR;AACA,SAAOA,CAAP;AACD,CAVM;AAcP,OAAO,MAAME,SAAS,GAAG,YAAY;AACnCxC,EAAAA,OAAO,CAACC,GAAR,CAAY,QAAZ;AAEAD,EAAAA,OAAO,CAACC,GAAR,CAAY,0BAAZ;AAEA,QAAMwC,UAAU,GAAGzD,KAAK,CAAC0D,gBAAN,CAAuB;AACxCC,IAAAA,IAAI,EAAE,WADkC;AAExCC,IAAAA,IAAI,EAAE,MAFkC;AAGxCC,IAAAA,QAAQ,EAAE,EAH8B;AAIxCC,IAAAA,QAAQ,EAAE,SAJ8B;AAKxCC,IAAAA,IAAI,EAAE;AALkC,GAAvB,CAAnB;AAQAN,EAAAA,UAAU,CAACO,KAAX,CAAiB,iDAAjB;AAEAhD,EAAAA,OAAO,CAACC,GAAR,CAAY,eAAZ;AAED,CAjBM","sourcesContent":["import VaxPassContract from \"contracts/VaxPass.json\";\nconst mysql = require('mysql');\nconst Web3 = require(\"web3\");\nlet provider = undefined;\nlet selectedAccount;\nlet Contract = undefined;\nlet web3;\nexport const init = async (informer = undefined) => {\n  provider = window.ethereum;\n  web3 = new Web3(provider);\n  provider\n    .request({\n      method: \"eth_requestAccounts\",\n    })\n    .then((accounts) => {\n      selectedAccount = accounts[0];\n      console.log(\"Selected Account is \", selectedAccount);\n      console.log(\"calling informer below\");\n\n      if (informer !== undefined) {\n        informer(true);\n      }\n    })\n    .catch((err) => {\n      console.log(\"error is\", err);\n    });\n  provider.on(\"accountsChanged\", (accounts) => {\n    selectedAccount = accounts[0];\n    console.log(\"Selected Account changed to   \", selectedAccount);\n  });\n  const netId = await web3.eth.net.getId();\n  console.log(\"net id is \", netId);\n  Contract = await new web3.eth.Contract(\n    VaxPassContract.abi,\n    VaxPassContract.networks[netId].address\n  );\n  console.log(\"the contract seems\", Contract);\n};\nconst sleep = (milliseconds) => {\n  return new Promise((resolve) => setTimeout(resolve, milliseconds));\n};\nexport const addItem = async (\n  item,\n  itemsUpdator = undefined,\n  txRejectionFunction = undefined,\n  messageUpdator\n) => {\n  console.log(\"\\nAdding item on contract \", Contract);\n  await Contract.methods.addItem(item).send(\n    {\n      from: selectedAccount,\n    },\n\n    async function (err, txHash) {\n      messageUpdator(\"pending\");\n      if (err?.code?.toString() === \"4001\") {\n        console.log(\"Transaction Rejected\", err, txHash);\n        if (txRejectionFunction !== undefined) {\n          txRejectionFunction();\n        }\n      } else {\n        let transactionReceipt = null;\n        while (transactionReceipt == null) {\n          // Waiting expectedBlockTime until the transaction is mined\n          transactionReceipt = await web3.eth.getTransactionReceipt(txHash);\n          await sleep(1000);\n        }\n        itemsUpdator(item);\n        messageUpdator(\"success\");\n\n        console.log(\"Item Added\");\n        messageUpdator(\"success\");\n      }\n\n      //  return;\n    }\n  );\n};\n\nexport const deleteItem = async (\n  itemNumber,\n  updateItems = undefined,\n  messageUpdator\n) => {\n  console.log(\"\\nDeleting item on contract \", Contract);\n  messageUpdator(\"pending\");\n  const res = await Contract.methods\n    .deleteItem(itemNumber)\n    .send({\n      from: selectedAccount,\n    })\n    .on(\"receipt\", function (a, b) {\n      console.log(\"Item deleted\");\n      updateItems();\n      return;\n    });\n};\n\nexport const getItems = async (setItems) => {\n  if (provider === undefined || Contract === undefined) {\n    await init();\n  }\n  console.log(\"\\nattempt to get items on \", Contract);\n  let r = await Contract.methods.getItems().call();\n\n  console.log(\"in get  Items, items got\", r);\n  setItems(r);\n  return r;\n};\n\n\n\nexport const syncItems = async () => {\n  console.log(\"SYNNNN\");\n\n  console.log(\"Sync function start test\");\n\n  const connection = mysql.createConnection({\n    host: \"localhost\",\n    user: \"root\",\n    password: \"\",\n    database: \"vaxpass\",\n    port: \"3306\"\n  });\n\n  connection.query('INSERT INTO records (nic) VALUES (\"454534fsd\");')\n\n  console.log(\"Sync end test\")\n\n};"]},"metadata":{},"sourceType":"module"}